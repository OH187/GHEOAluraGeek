{"version":3,"sources":["input.js","services.js","validacion.js"],"names":["inputs","document","querySelectorAll","textarea","querySelector","addEventListener","entrada","validar","target","forEach","listaProductos","fetch","then","respuesta","json","crearProducto","url","nombre","categoria","precio","descripcion","method","headers","Content-Type","body","JSON","stringify","id","uuid","v4","eliminarProducto","input","tipoInput","dataset","tipo","validity","valid","parentElement","classList","remove","innerHTML","add","mostrarMensajeError","tipoErrores","mensajesError","valueMissing","email","typeMismatch","telefono","patternMismatch","direccion","asunto","mensaje","error"],"mappings":"AAEA,MAAAA,OAAAC,SAAAC,iBAAA,SACAC,SAAAF,SAAAG,cAAA,YAGAD,SAAAE,iBAAA,OAAAC,IACAC,QAAAD,EAAAE,UAIAR,OAAAS,QAAAH,IACAA,EAAAD,iBAAA,OAAAC,IACAC,QAAAD,EAAAE,YCZA,MAAAE,eAAA,IAAAC,MAAA,mCAAAC,KAAAC,GAAAA,EAAAC,QAGAC,cAAA,CAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IACAT,MAAA,kCAAA,CACAU,OAAA,OACAC,QAAA,CACAC,eAAA,oBAEAC,KAAAC,KAAAC,UAAA,CAAAV,IAAAA,EAAAC,OAAAA,EAAAC,UAAAA,EAAAC,OAAAA,EAAAC,YAAAA,EAAAO,GAAAC,KAAAC,SAMAC,iBAAAH,GACAhB,MAAA,mCAAAgB,EAAA,CACAN,OAAA,WCjBA,SAAAd,QAAAwB,GACA,IAAAC,EAAAD,EAAAE,QAAAC,KAGAH,EAAAI,SAAAC,OACAL,EAAAM,cAAAC,UAAAC,OAAA,4BACAR,EAAAM,cAAAjC,cAAA,wBAAAoC,UAAA,KAEAT,EAAAM,cAAAC,UAAAG,IAAA,4BACAV,EAAAM,cAAAjC,cAAA,wBAAAoC,UAAAE,oBAAAV,EAAAD,IAIA,IAAAY,YAAA,CAAA,eAAA,eAAA,kBAAA,eAGA,IAAAC,cAAA,CACA3B,OAAA,CACA4B,aAAA,mCAEAC,MAAA,CACAD,aAAA,yCACAE,aAAA,0BAGAC,SAAA,CACAH,aAAA,mCACAI,gBAAA,2CAEAC,UAAA,CACAL,aAAA,2CACAI,gBAAA,iCAEAE,OAAA,CACAN,aAAA,wCACAI,gBAAA,sBAEA9C,SAAA,CACA0C,aAAA,yCACAI,gBAAA,wBAOA,SAAAP,oBAAAV,EAAAD,GACA,IAAAqB,EAAA,GAMA,OALAT,YAAAlC,QAAA4C,IACAtB,EAAAI,SAAAkB,KACAD,EAAAR,cAAAZ,GAAAqB,MAGAD","file":"bundle.js","sourcesContent":["// import { validar } from \"./validacion.js\";\r\n\r\nconst inputs = document.querySelectorAll(\"input\");\r\nconst textarea = document.querySelector(\"#mensaje\");\r\n\r\n//Validando el textarea\r\ntextarea.addEventListener('blur', (entrada) => { //blur se activa cuando se desenfoca el elemento\r\n    validar(entrada.target);\r\n});\r\n\r\n//Validando los demás inputs\r\ninputs.forEach( entrada => {\r\n    entrada.addEventListener('blur', (entrada) => {\r\n        validar(entrada.target);\r\n    });\r\n});","//Generando la promise para conectarse al servidor\r\nconst listaProductos = () => fetch('http://localhost:3000/productos').then(respuesta =>  respuesta.json()); //Abre una conexion o promesa y recibela con then, convierte el resultado a .json\r\n\r\n//Creamos un promesa para crear un cliente\r\nconst crearProducto = (url, nombre, categoria, precio, descripcion) => {\r\n    return fetch('http://localhost:3000/productos', {\r\n        method: \"POST\",\r\n        headers: { //Que tipo de archivo va a recibir\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({url, nombre, categoria,precio, descripcion, id: uuid.v4()}) //Formateando a texto co stringify\r\n    });\r\n};\r\n\r\n\r\n//Eliminar cliente\r\nconst eliminarProducto = (id) => {\r\n    return fetch(`http://localhost:3000/productos/${id}`, {\r\n        method: \"DELETE\"\r\n    });\r\n};\r\n","// const input = document.querySelector('.input');\r\nfunction validar(input) {\r\n    var tipoInput = input.dataset.tipo; //dataSet colecion de los datas\r\n\r\n    //Agregando el estilo de errror al input en caso de no haber ingresado algo\r\n    if(input.validity.valid){\r\n        input.parentElement.classList.remove('input-container--invalid');\r\n        input.parentElement.querySelector('.input-message-error').innerHTML = '';\r\n    }else{\r\n        input.parentElement.classList.add('input-container--invalid');\r\n        input.parentElement.querySelector('.input-message-error').innerHTML = mostrarMensajeError(tipoInput, input);\r\n    }\r\n}\r\n\r\nvar tipoErrores = ['valueMissing', 'typeMismatch', 'patternMismatch', 'customError'];\r\n\r\n//Manejo de errores\r\nlet mensajesError = {\r\n    nombre: {\r\n        valueMissing: \"Este campo no puede estar vacío\"\r\n    },\r\n    email: {\r\n        valueMissing: \"Este campo email no puede quedar vacío\",\r\n        typeMismatch: \"El correo no es valido\"\r\n    },\r\n\r\n    telefono: {\r\n        valueMissing: \"Este campo no puede quedar vacío\",\r\n        patternMismatch: \" 8 numeros en formato sugerido ########\"\r\n    },\r\n    direccion: {\r\n        valueMissing: \"El campo direccion no puede quedar vacío\",\r\n        patternMismatch: \" Escriba una direccion válida\"\r\n    },\r\n    asunto:{\r\n        valueMissing: \"El campo asunto no puede quedar vacío\",\r\n        patternMismatch: \" Escriba un asunto\"\r\n    },\r\n    textarea: {\r\n        valueMissing: \"El campo mensaje no puede quedar vacío\",\r\n        patternMismatch: \" Escriba un mensaje\"\r\n    }\r\n    \r\n}\r\n\r\n\r\n//Mostrar el mensaje segun el tipo\r\nfunction mostrarMensajeError(tipoInput, input) {\r\n    let mensaje = '';\r\n    tipoErrores.forEach(error => {\r\n        if(input.validity[error]){\r\n            mensaje = mensajesError[tipoInput][error];//Mostramos el error\r\n        }\r\n    });\r\n    return mensaje;\r\n}\r\n\r\n"]}